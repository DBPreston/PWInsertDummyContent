<?php namespace ProcessWire;

/**
 * ProcessWire Textformatter to insert dummy content
 *
 * ProcessWire 3.x, Copyright 2016 by Ryan Cramer
 * https://processwire.com
 *
 * Usage
 * [dc3] will be replaced by 3 paras from 'dummytext.txt' e.g. for body text
 * [dc4w] will be replaced by 4 words from paragraph 1 of 'dummytext.txt' e.g. for headings
 *
 */

class TextformatterInsertDummyContent extends Textformatter {

	public static function getModuleInfo() {
		return array(
			'title' => 'Insert Dummy Content',
			'summary' => "Development Tool - allows special tags to be replaced by paragraphs or optionally words of dummy content.",
			'version' => 002,
		);
	}

	public function format(&$str) {

		$textfile = $this->config->paths->siteModules.'TextFormatterInsertDummyContent'.DIRECTORY_SEPARATOR.'dummytext.txt';

		if(!file_exists($textfile)){
			$str = "<span style='color:red'>Error - 'dummytext.txt' not found</span> (TextFormatterInsertDummyContent)";
			return;
		}

		$paras = file($textfile,FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

		preg_match("/\[dc:?(\d)-?(\d?)(p|w?)\]/", $str, $matches);

		if(!$matches) return;

		$fullMatch = $matches[0];
		$showMin = $matches[1];
		$showMax = $matches[2];
		$showWhat = $matches[3];

		if($showMax){
			$showHowMany = mt_rand($showMin, $showMax);
		} else {
			$showHowMany = $showMin;
		}

		$out = '';

		if($showWhat == 'w'){

			$wordStart = $this->page->id % (str_word_count($paras[0]) - $showMin);

			$words = str_word_count($paras[0],1);

			for($w = $wordStart; $w < ($wordStart + $showHowMany); $w++){
			  $out .= "{$words[$w]} ";
			}

			$out = rtrim(ucwords($out));

		} else {

			$paraStart = $this->page->id % (count($paras) - $showMin);

			for($p = $paraStart; $p < ($paraStart + $showHowMany); $p++){
			  $out .= "<p>{$paras[$p]}</p>";
			}

		}

		$str = str_replace($fullMatch, $out, $str);

	}
}
